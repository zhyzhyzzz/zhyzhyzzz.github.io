{"meta":{"title":"zhyzhyzzz的个人博客","subtitle":"a","description":"前端开发","author":"John Doe","url":"http://www.node200.top"},"pages":[{"title":"关于","date":"2018-10-18T09:49:09.789Z","updated":"2018-10-18T09:49:09.789Z","comments":false,"path":"about/index.html","permalink":"http://www.node200.top/about/index.html","excerpt":"","text":"1擅长微信小程序开发，apicloudApp开发，vue等相关技术。微信：xk8668。爱前端，爱生活！"},{"title":"分类","date":"2018-10-18T02:36:08.949Z","updated":"2018-10-18T02:36:08.949Z","comments":false,"path":"categories/index.html","permalink":"http://www.node200.top/categories/index.html","excerpt":"","text":""},{"title":"书单","date":"2018-10-17T07:09:13.635Z","updated":"2018-10-17T07:09:13.635Z","comments":false,"path":"books/index.html","permalink":"http://www.node200.top/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2018-10-17T07:27:20.834Z","updated":"2018-10-17T07:27:20.834Z","comments":true,"path":"links/index.html","permalink":"http://www.node200.top/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2018-10-17T07:12:58.010Z","updated":"2018-10-17T07:12:58.010Z","comments":false,"path":"repository/index.html","permalink":"http://www.node200.top/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-10-17T07:10:34.402Z","updated":"2018-10-17T07:10:34.402Z","comments":false,"path":"tags/index.html","permalink":"http://www.node200.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"express 利用 multer 优雅的获取 post 传递的文件和表单数据","slug":"express_body","date":"2018-10-18T03:16:45.251Z","updated":"2018-10-18T03:17:47.488Z","comments":true,"path":"2018/10/18/express_body/","link":"","permalink":"http://www.node200.top/2018/10/18/express_body/","excerpt":"","text":"在一个express项目中使用multer npm install multer –save 123456const express =require(&apos;express&apos;)const multer =require(&apos;multer&apos;)const upload = multer(&#123;dest:__dirname+&apos;/static/upload&apos;&#125;)//设置上传的目录文件夹 123456789101112131415161718需要注意一点的书 ：enctype=&quot;multipart/form-data&quot;，上传的含有非文本内容，即含有文件（txt、MP3等）的时候，需要将form的enctype设置为multipart/form-data接收的时候要标注multer接收的是什么类型的数据，这里选用的是.single(&apos;file&apos;)，文件名称为file的数据router.post(&apos;/upload&apos;,upload.single(&apos;file&apos;),(req,res)=&gt;&#123;const data = &#123; file:req.file,//获取到的文件 message:req.body//获取到的表单数据 &#125;res.json(data)&#125;) 把获取出来的数据打印一下发现想要的都有了","categories":[{"name":"node","slug":"node","permalink":"http://www.node200.top/categories/node/"}],"tags":[{"name":"express","slug":"express","permalink":"http://www.node200.top/tags/express/"},{"name":"nodejs","slug":"nodejs","permalink":"http://www.node200.top/tags/nodejs/"}]},{"title":"微信小程序云开发初体验","slug":"wechat_yun","date":"2018-10-18T03:14:19.614Z","updated":"2018-10-18T03:15:21.513Z","comments":true,"path":"2018/10/18/wechat_yun/","link":"","permalink":"http://www.node200.top/2018/10/18/wechat_yun/","excerpt":"","text":"9.10号微信重磅推出小程序云开发功能，该功能方便了很多逻辑上的问题，至于安全嘛，腾讯的，如果腾讯不看你的，没人看得到，话不多说，跟着腾讯文档进行第一个demo首先要升级一个开发者工具版本，更新到最新，下载地址：https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html 1、下载到最新的工具之后打开，先创建一个存储我们自己云函数的文件夹命名：functions 2、找到project.config.json文件，添加 “cloudfunctionRoot”: “functions/“ 配置我们的云函数目录12345678910111213141516171819202122232425262728293031323334353637&#123; &quot;description&quot;: &quot;项目配置文件。&quot;, &quot;cloudfunctionRoot&quot;: &quot;functions/&quot;, &quot;setting&quot;: &#123; &quot;urlCheck&quot;: true, &quot;es6&quot;: true, &quot;postcss&quot;: true, &quot;minified&quot;: true, &quot;newFeature&quot;: true &#125;, &quot;compileType&quot;: &quot;miniprogram&quot;, &quot;libVersion&quot;: &quot;2.1.3&quot;, &quot;appid&quot;: &quot;asdaaaaaa&quot;, &quot;projectname&quot;: &quot;&quot;, &quot;condition&quot;: &#123; &quot;search&quot;: &#123; &quot;current&quot;: -1, &quot;list&quot;: [] &#125;, &quot;conversation&quot;: &#123; &quot;current&quot;: -1, &quot;list&quot;: [] &#125;, &quot;plugin&quot;: &#123; &quot;current&quot;: -1, &quot;list&quot;: [] &#125;, &quot;game&quot;: &#123; &quot;current&quot;: -1, &quot;list&quot;: [] &#125;, &quot;miniprogram&quot;: &#123; &quot;current&quot;: -1, &quot;list&quot;: [] &#125; &#125;&#125; 3、发现云函数的目录是不是别具一格，是的话就右键选择：新建node.js云函数，这时候系统会配置一个基础版的云函数给我们，我们就拿这个基础的云函数走一个流程123456789101112// 云函数入口文件const cloud = require(&apos;wx-server-sdk&apos;)cloud.init() //初始化，小程序调用函数前必须要要先调用初始化// 云函数入口函数exports.main = async (event, context) =&gt; &#123; return &#123; sum: event.a + event.b,//event里面放的都是一些用户传递过来的数据，参数a和参数b userInfo: event.userInfo //还可以直接获取到用户的openid，这些是腾讯给出来的，并不需要用户去授权，很安全。 &#125;&#125; 4、在我们的functions目录中，右键我们的add，选择：上传并部署，然后就开始调用：123456789wx.cloud.callFunction(&#123; name: &apos;add&apos;, data: &#123; a: 1, b: 9 &#125; &#125;).then((res)=&gt;&#123; console.log(res) &#125;) 5、是不是很激动，如果按照官方给出的文档，可能会遇到下面几个问题： 问题①：Cannot read property ‘callFunction’ of undefined;遇到该问题很好解决，这个问题一般都是调试基础库版本太低的原因，可以往上调一下。问题②：发现版本库调高了之后发现了另外一个问题，1234errCode: -1 | errMsg: Cloud API isn&apos;t enabled, please call wx.cloud.init first请先调用 wx.cloud.init() 完成初始化后再调用其他云 API。init 方法可传入一个对象用于设置默认配置，详见文档。;at pages/test/test page getData functionError: errCode: -1 | errMsg: Cloud API isn&apos;t enabled, please call wx.cloud.init first请先调用 wx.cloud.init() 完成初始化后再调用其他云 API。init 方法可传入一个对象用于设置默认配置，详见文档。 这个问题，就是调用云函数之前需要先进行初始化。wx.cloud.init()就可以了。再去调用云函数。成功获取返回来的数据。官方提供的一个最初的简单小demo就算走通了，剩下的基本上都是此类操作，只是需要对照官方数据库操作进行特别的操作。如果这篇文章对你有帮助，希望您也能加入我的qq群帮助更多需要帮助的小程序开发者：751741695","categories":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://www.node200.top/categories/微信小程序/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://www.node200.top/tags/javascript/"},{"name":"微信小程序云开发","slug":"微信小程序云开发","permalink":"http://www.node200.top/tags/微信小程序云开发/"}]},{"title":"利用vue-cli3快速搭建vue项目详细过程","slug":"vue","date":"2018-10-18T02:14:20.650Z","updated":"2018-10-18T03:18:01.658Z","comments":true,"path":"2018/10/18/vue/","link":"","permalink":"http://www.node200.top/2018/10/18/vue/","excerpt":"","text":"一、介绍Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统。有三个组件： CLI：@vue/cli 全局安装的 npm 包，提供了终端里的vue命令（如：vue create 、vue serve 、vue ui 等命令） CLI 服务：@vue/cli-service是一个开发环境依赖。构建于 webpack 和 webpack-dev-server 之上（提供 如：serve、build 和 inspect 命令） CLI 插件：给Vue 项目提供可选功能的 npm 包 （如： Babel/TypeScript 转译、ESLint 集成、unit和 e2e测试 等） 二、安装1、全局安装过旧版本的 vue-cli(1.x 或 2.x)要先卸载它，否则跳过此步：1npm uninstall vue-cli -g //或者 yarn global remove vue-cli 操作如下： 可以看到我之前的版本是2.9.6，卸载成功后，vue命令便不存在了 ps：npm WARN警告，可能是coffee-script 的某个依赖包改名了（coffee-script本身已经淘汰了） 2、Vue CLI 3需要 nodeJs ≥ 8.9 (官方推荐 8.11.0+，你可以使用 nvm 或 nvm-windows在同一台电脑中管理多个 Node 版本）。（1）查看node 版本 （2）下载安装nodeJs很简单（和其他系统软件一样根据需求按步骤安装）这里不做介绍，中文官方下载地址：http://nodejs.cn/download/ 3、安装@vue/cli（Vue CLI 3的包名称由 vue-cli 改成了 @vue/cli）1cnpm install -g @vue/cli //yarn global add @vue/cli 操作如下图： 查看版本： 1vue -V //vue --version 结果如下图： 三、使用1、vue create 搭建新项目（1）新建项目：*官方提示：如果你在 Windows 上通过 minTTY 使用 Git Bash，交互提示符并不工作，必须通过 winpty vue.cmd create hello-world 启动这个命令 1vue create &lt;Project Name&gt; //文件名 不支持驼峰（含大写字母） 具体操作如下： 首先，会提示你选择一个preset（预设）： ① 除最后两个，其他选项都是你此前保存的预设配置（如下图第一个“ preset-config”是我之前保存的预设配置，如今便可以直接用了）： 如果没有配置保存过，则只有以下两个选项： ② default（babel，eslint）： 默认设置（直接enter）非常适合快速创建一个新项目的原型，没有带任何辅助功能的 npm包 ③ Manually select features： 手动配置（按方向键 ↓）是我们所需要的面向生产的项目，提供可选功能的 npm 包 手动配置，根据你需要用方向键选择（按 “空格键”选择/取消选择，A键全选/取消全选）对应功能 简介： 12345678910? Check the features needed for your project: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)&gt;( ) Babel //转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。 ( ) TypeScript// TypeScript是一个JavaScript（后缀.js）的超集（后缀.ts）包含并扩展了 JavaScript 的语法，需要被编译输出为 JavaScript在浏览器运行，目前较少人再用 ( ) Progressive Web App (PWA) Support// 渐进式Web应用程序 ( ) Router // vue-router（vue路由） ( ) Vuex // vuex（vue的状态管理模式） ( ) CSS Pre-processors // CSS 预处理器（如：less、sass） ( ) Linter / Formatter // 代码风格检查和格式化（如：ESlint） ( ) Unit Testing // 单元测试（unit tests） ( ) E2E Testing // e2e（end to end） 测试 选择完后直接enter，然后会提示你选择对应功能的具体工具包，选择自己擅长或者使用广泛的（方便遇到问题时百度），简介如下： ①是否使用history router： Vue-Router 利用了浏览器自身的hash 模式和 history 模式的特性来实现前端路由（通过调用浏览器提供的接口） hash： 浏览器url址栏 中的 # 符号（如这个 URL：http://www.abc.com/#/hello，hash 的值为“ #/hello”），hash 不被包括在 HTTP 请求中（对后端完全没有影响），因此改变 hash 不会重新加载页面 history：利用了 HTML5 History Interface 中新增的 pushState( ) 和 replaceState( ) 方法（需要特定浏览器支持）。单页客户端应用，history mode 需要后台配置支持（详细参见：https://router.vuejs.org/zh/guide/essentials/history-mode.html） ② css预处理器 主要为css解决浏览器兼容、简化CSS代码 等问题（* Sass诞生于2007年，最早也是最成熟的一款CSS预处理器语言。） 123456? Please pick a preset: Manually select features? Check the features needed for your project: Router, Vuex, CSS Pre-processors, Linter, Unit? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default):&gt; SCSS/SASS //Sass安装需要Ruby环境，是在服务端处理的，SCSS 是 Sass3新语法（完全兼容 CSS3且继承Sass功能） LESS //Less最终会通过编译处理输出css到浏览器，Less 既可以在客户端上运行，也可在服务端运行 (借助 Node.js) Stylus //Stylus主要用来给Node项目进行CSS预处理支持，Stylus功能上更为强壮，和js联系更加紧密，可创建健壮的、动态的的CSS。 ③ ESLint： 提供一个插件化的javascript代码检测工具 12345? Pick a linter / formatter config: (Use arrow keys)&gt; ESLint with error prevention only ESLint + Airbnb config ESLint + Standard config ESLint + Prettier //使用较多 ④ 何时检测： 123? Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)&gt;( ) Lint on save // 保存就检测 ( ) Lint and fix on commit // fix和commit时候检查 ⑤ 单元测试 ： 123? Pick a unit testing solution: (Use arrow keys)&gt; Mocha + Chai //mocha灵活,只提供简单的测试结构，如果需要其他功能需要添加其他库/插件完成。必须在全局环境中安装 Jest //安装配置简单，容易上手。内置Istanbul，可以查看到测试覆盖率，相较于Mocha:配置简洁、测试代码简洁、易于和babel集成、内置丰富的expect ⑥ 如何存放配置 ： 123? Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? (Use arrow keys)&gt; In dedicated config files // 独立文件放置 In package.json // 放package.json里 ⑦ 是否保存本次配置（之后可以直接使用）： 1? Save this as a preset for future projects? (Y/n) // y:记录本次配置，然后需要你起个名; n：不记录本次配置 （2）搭建完成： 项目结构如下（不同的预设包含不同的文件，大致结构一致）： 对比之前的项目包： vs 精简的只剩灵魂了~ ，主要的大的区别如下： ① vuex（状态管理）： vue cli 2 中：vuex是搭建完成后自己npm install的，并不包括在搭建过程中。可以看到vue cli 2的vuex默认文件夹（store）又包含了三个js文件：action（存放一些调用外部API接口的异步执行的的方法，然后commit mutations改变mutations 数据）、index（初始化mutations 数据，是store的出口）、mutations（处理数据逻辑的同步执行的方法的集合，Vuex中store数据改变的唯一方法commit mutations） vue cli 3 中：vuex是包含在搭建过程供选择的预设。vue cli 3 中默认只用一个store.js代替了原来的store文件夹中的三个js文件。action、mutations、state以及store 的 getters 的用法有很多，举常用的例子： eg：store.js 1234567891011121314151617181920212223242526272829303132import Vue from &apos;vue&apos;;import Vuex from &apos;vuex&apos;; //引入 vueximport store from &apos;./store&apos; //注册storeVue.use(Vuex); //使用 vuexexport default new Vuex.Store(&#123; state: &#123; // 初始化状态 count: 0 &#125;, mutations: &#123; // 处理状态 increment(state, payload) &#123; state.count += payload.step || 1; &#125; &#125;, actions: &#123; // 提交改变后的状态 increment(context, param) &#123; context.state.count += param.step; context.commit(&apos;increment&apos;, context.state.count)//提交改变后的state.count值 &#125;, incrementStep(&#123;state, commit, rootState&#125;) &#123; if (rootState.count &lt; 100) &#123; store.dispatch(&apos;increment&apos;, &#123;//调用increment()方法 step: 10 &#125;) &#125; &#125; &#125;&#125;) 使用时，eg： main.js： 123456789101112import Vue from &apos;vue&apos;import App from &apos;./App.vue&apos;import router from &apos;./router&apos;import store from &apos;./store&apos; //引入状态管理 storeVue.config.productionTip = falsenew Vue(&#123; router, store,//注册store(这可以把 store 的实例注入所有的子组件) render: h =&gt; h(App)&#125;).$mount(&apos;#app&apos;) components/HelloWorld.vue： 1234567891011121314151617181920212223242526272829303132&lt;template&gt; &lt;div class=&quot;home&quot;&gt; &lt;HelloWorld :msg=&quot;count&quot;/&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; import HelloWorld from &apos;@/components/HelloWorld.vue&apos; import &#123;mapActions, mapState&#125; from &apos;vuex&apos; //注册 action 和 state export default &#123; name: &apos;home&apos;, computed: &#123; //在这里映射 store.state.count，使用方法和 computed 里的其他属性一样 ...mapState([ &apos;count&apos; ]), &#125;, created() &#123; this.incrementStep(); &#125;, methods: &#123; //在这里引入 action 里的方法，使用方法和 methods 里的其他方法一样 ...mapActions([ &apos;incrementStep&apos; ]), &#125;, components: &#123; HelloWorld &#125; &#125;&lt;/script&gt; ② router （路由）： vue cli 2 ：“ router/index.js ” vue cli 3：“router.js”（用法和做的事都一样） ③ 去掉 static 、 新增 public 文件夹 vue cli 2 ：static 是 webpack 默认存放静态资源的文件夹，打包时会直接复制一份到dist文件夹不会经过 webpack 编译 vue cli 3 ：摒弃 static 新增了 public 。vue cli 3 中“静态资源”两种处理方式： 经webpack 处理：在 JavaScript 被导入或在 template/CSS 中通过“相对路径”被引用的资源会被编译并压缩 不经webpack 处理：放置在 public 目录下或通过绝对路径被引用的资源将会“直接被拷贝”一份，不做任何编译压缩处理 ④ index.html ： vue cli 2 ：“index.html ” vue cli 3 ：“public/index.html ”此模板会被 html-webpack-plugin 处理的 ⑤ src/views： vue cli 3 的 src文件夹 新增 views文件夹 用来存放 “页面”，区分 components（组件） ⑥ 去掉 build（根据config中的配置来定义规则）、config（配置不同环境的参数）文件夹 ： vue cli 3 中 ，这些配置 你可以通过 命令行参数、或 vue.config.js （在根目录 新建一个 vue.config.js 同名文件）里的 devServer 字段配置开发服务器 ⑦ babel.config.js： 配置Babel 。Vue CLI 使用了 Babel 7 中的新配置格式 babel.config.js。和 .babelrc 或 package.json 中的 babel 字段不同，这个配置文件不会使用基于文件位置的方案，而是会一致地运用到项目根目录以下的所有文件，包括 node_modules 内部的依赖。官方推荐在 Vue CLI 项目中始终使用 babel.config.js 取代其它格式。 ⑧ 根目录的一些其他文件的改变： 之前所有的配置文件都在vue create 搭建时preset预设 或者 后期可以通过 命令参数 、 vue.config.js 中配置 根据需要在根目录下新建 vue.config.js自行配置，eg：（简单配置，更多配置详情参见官网：[https://cli.vuejs.org/zh/config/](https://cli.vuejs.org/zh/config/)） 1234567891011121314151617181920212223242526272829303132333435363738394041424344module.exports = &#123; baseUrl: &apos;/&apos;,// 部署应用时的根路径(默认&apos;/&apos;),也可用相对路径(存在使用限制) outputDir: &apos;dist&apos;,// 运行时生成的生产环境构建文件的目录(默认&apos;&apos;dist&apos;&apos;，构建之前会被清除) assetsDir: &apos;&apos;,//放置生成的静态资源(s、css、img、fonts)的(相对于 outputDir 的)目录(默认&apos;&apos;) indexPath: &apos;index.html&apos;,//指定生成的 index.html 的输出路径(相对于 outputDir)也可以是一个绝对路径。 pages: &#123;//pages 里配置的路径和文件名在你的文档目录必须存在 否则启动服务会报错 index: &#123;//除了 entry 之外都是可选的 entry: &apos;src/index/main.js&apos;,// page 的入口,每个“page”应该有一个对应的 JavaScript 入口文件 template: &apos;public/index.html&apos;,// 模板来源 filename: &apos;index.html&apos;,// 在 dist/index.html 的输出 title: &apos;Index Page&apos;,// 当使用 title 选项时,在 template 中使用：&lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt; chunks: [&apos;chunk-vendors&apos;, &apos;chunk-common&apos;, &apos;index&apos;] // 在这个页面中包含的块，默认情况下会包含,提取出来的通用 chunk 和 vendor chunk &#125;, subpage: &apos;src/subpage/main.js&apos;//官方解释：当使用只有入口的字符串格式时,模板会被推导为&apos;public/subpage.html&apos;,若找不到就回退到&apos;public/index.html&apos;,输出文件名会被推导为&apos;subpage.html&apos; &#125;, lintOnSave: true,// 是否在保存的时候检查 productionSourceMap: true,// 生产环境是否生成 sourceMap 文件 css: &#123; extract: true,// 是否使用css分离插件 ExtractTextPlugin sourceMap: false,// 开启 CSS source maps loaderOptions: &#123;&#125;,// css预设器配置项 modules: false// 启用 CSS modules for all css / pre-processor files. &#125;, devServer: &#123;// 环境配置 host: &apos;localhost&apos;, port: 8080, https: false, hotOnly: false, open: true, //配置自动启动浏览器 proxy: &#123;// 配置多个代理(配置一个 proxy: &apos;http://localhost:4000&apos; ) &apos;/api&apos;: &#123; target: &apos;&lt;url&gt;&apos;, ws: true, changeOrigin: true &#125;, &apos;/foo&apos;: &#123; target: &apos;&lt;other_url&gt;&apos; &#125; &#125; &#125;, pluginOptions: &#123;// 第三方插件配置 // ... &#125;&#125;; （3）npm run serve 跑起来~ webstorm打开项目（个人习惯，你也可以搭建完直接顺势运行），运行后webstorm自动生成了个.idea文件（用来存放项目的配置信息，如：括版本控制信息、历史记录等） （4）查看运行结果：打开浏览器，输入运行结果提示的地址（上上图红框），enter （5）拉取 2.x 模板 (旧版本)：Vue CLI 3 覆盖了旧版本的vue 命令，如果需要使用旧版本的 vue init 功能，可以全局安装一个桥接工具： 12npm install -g @vue/cli-init //`vue init` 的运行效果将会跟 `vue-cli@2.x` 相同vue init webpack my-project （6）在现有的项目中安装插件（vue add 命令），eg： 官方提示：vue add 的设计意图是为了安装和调用 Vue CLI 插件。这不意味着替换掉普通的 npm 包。对于这些普通的 npm 包，你仍然需要选用包管理器 ！官方警告：我们推荐在运行 vue add 之前将项目的最新状态提交，因为该命令可能调用插件的文件生成器并很有可能更改你现有的文件。 1vue add @vue/eslint //如果不带 @vue 前缀，该命令会换作解析一个 unscoped 的包，你也可以基于一个指定的 scope 使用（eg：vue add @foo/bar） 2、vue ui 图形化界面创建项目1vue ui 命令行输入命令，操作如下： 然后会自动打浏览器页面，选择创建如下： 结果如下：页面提示正在安装依赖： 本地已经有项目包了： 安装完成：你可以在这管理（安装、删除）插件、运行并分析你的项目文件 1文章来源：https://my.oschina.net/wangnian/blog/2051369","categories":[{"name":"vue","slug":"vue","permalink":"http://www.node200.top/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://www.node200.top/tags/vue/"},{"name":"javascript","slug":"javascript","permalink":"http://www.node200.top/tags/javascript/"},{"name":"vue-cli3","slug":"vue-cli3","permalink":"http://www.node200.top/tags/vue-cli3/"}]}]}