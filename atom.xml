<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-18T03:17:47.488Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>express 利用 multer 优雅的获取 post 传递的文件和表单数据</title>
    <link href="http://yoursite.com/2018/10/18/express_body/"/>
    <id>http://yoursite.com/2018/10/18/express_body/</id>
    <published>2018-10-18T03:16:45.251Z</published>
    <updated>2018-10-18T03:17:47.488Z</updated>
    
    <content type="html"><![CDATA[<p>在一个express项目中使用multer</p><blockquote><p>npm install multer –save</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const express =require(&apos;express&apos;)</span><br><span class="line"></span><br><span class="line">const multer =require(&apos;multer&apos;)</span><br><span class="line"></span><br><span class="line">const upload = multer(&#123;dest:__dirname+&apos;/static/upload&apos;&#125;)//设置上传的目录文件夹</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/5814981-423fc53e1fac0603?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/5814981-55d997e89d25ab5e?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">需要注意一点的书 ：enctype=&quot;multipart/form-data&quot;，上传的含有非文本内容，即含有文件（txt、MP3等）的时候，需要将form的enctype设置为multipart/form-data</span><br><span class="line"></span><br><span class="line">接收的时候要标注multer接收的是什么类型的数据，这里选用的是.single(&apos;file&apos;)，文件名称为file的数据</span><br><span class="line"></span><br><span class="line">router.post(&apos;/upload&apos;,upload.single(&apos;file&apos;),(req,res)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">const data = &#123;</span><br><span class="line"></span><br><span class="line">         file:req.file,//获取到的文件</span><br><span class="line"></span><br><span class="line">        message:req.body//获取到的表单数据</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">res.json(data)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>把获取出来的数据打印一下发现想要的都有了</p><p><img src="http://upload-images.jianshu.io/upload_images/5814981-d12ca20ab9c4d4fc?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在一个express项目中使用multer&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm install multer –save&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
      <category term="node" scheme="http://yoursite.com/categories/node/"/>
    
    
      <category term="express" scheme="http://yoursite.com/tags/express/"/>
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序云开发初体验</title>
    <link href="http://yoursite.com/2018/10/18/wechat_yun/"/>
    <id>http://yoursite.com/2018/10/18/wechat_yun/</id>
    <published>2018-10-18T03:14:19.614Z</published>
    <updated>2018-10-18T03:15:21.513Z</updated>
    
    <content type="html"><![CDATA[<p>9.10号微信重磅推出小程序云开发功能，该功能方便了很多逻辑上的问题，至于安全嘛，腾讯的，如果腾讯不看你的，没人看得到，话不多说，跟着腾讯文档进行第一个demo<br>首先要升级一个开发者工具版本，更新到最新，下载地址：<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html</a></p><p>1、下载到最新的工具之后打开，先创建一个存储我们自己云函数的文件夹命名：functions</p><p>2、找到project.config.json文件，添加 “cloudfunctionRoot”: “functions/“ 配置我们的云函数目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;description&quot;: &quot;项目配置文件。&quot;,</span><br><span class="line">&quot;cloudfunctionRoot&quot;: &quot;functions/&quot;,</span><br><span class="line">&quot;setting&quot;: &#123;</span><br><span class="line">&quot;urlCheck&quot;: true,</span><br><span class="line">&quot;es6&quot;: true,</span><br><span class="line">&quot;postcss&quot;: true,</span><br><span class="line">&quot;minified&quot;: true,</span><br><span class="line">&quot;newFeature&quot;: true</span><br><span class="line">&#125;,</span><br><span class="line">&quot;compileType&quot;: &quot;miniprogram&quot;,</span><br><span class="line">&quot;libVersion&quot;: &quot;2.1.3&quot;,</span><br><span class="line">&quot;appid&quot;: &quot;asdaaaaaa&quot;,</span><br><span class="line">&quot;projectname&quot;: &quot;&quot;,</span><br><span class="line">&quot;condition&quot;: &#123;</span><br><span class="line">&quot;search&quot;: &#123;</span><br><span class="line">&quot;current&quot;: -1,</span><br><span class="line">&quot;list&quot;: []</span><br><span class="line">&#125;,</span><br><span class="line">&quot;conversation&quot;: &#123;</span><br><span class="line">&quot;current&quot;: -1,</span><br><span class="line">&quot;list&quot;: []</span><br><span class="line">&#125;,</span><br><span class="line">&quot;plugin&quot;: &#123;</span><br><span class="line">&quot;current&quot;: -1,</span><br><span class="line">&quot;list&quot;: []</span><br><span class="line">&#125;,</span><br><span class="line">&quot;game&quot;: &#123;</span><br><span class="line">&quot;current&quot;: -1,</span><br><span class="line">&quot;list&quot;: []</span><br><span class="line">&#125;,</span><br><span class="line">&quot;miniprogram&quot;: &#123;</span><br><span class="line">&quot;current&quot;: -1,</span><br><span class="line">&quot;list&quot;: []</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3、发现云函数的目录是不是别具一格，是的话就右键选择：新建node.js云函数，这时候系统会配置一个基础版的云函数给我们，我们就拿这个基础的云函数走一个流程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 云函数入口文件</span><br><span class="line">const cloud = require(&apos;wx-server-sdk&apos;)</span><br><span class="line"></span><br><span class="line">cloud.init() //初始化，小程序调用函数前必须要要先调用初始化</span><br><span class="line"></span><br><span class="line">// 云函数入口函数</span><br><span class="line">exports.main = async (event, context) =&gt; &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    sum: event.a + event.b,//event里面放的都是一些用户传递过来的数据，参数a和参数b</span><br><span class="line">    userInfo: event.userInfo //还可以直接获取到用户的openid，这些是腾讯给出来的，并不需要用户去授权，很安全。</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4、在我们的functions目录中，右键我们的add，选择：上传并部署，然后就开始调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wx.cloud.callFunction(&#123;</span><br><span class="line">   name: &apos;add&apos;,</span><br><span class="line">   data: &#123;</span><br><span class="line">     a: 1,</span><br><span class="line">     b: 9</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;).then((res)=&gt;&#123;</span><br><span class="line">   console.log(res)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure></p><p>5、是不是很激动，如果按照官方给出的文档，可能会遇到下面几个问题：</p><p>问题①：Cannot read property ‘callFunction’ of undefined;<br>遇到该问题很好解决，这个问题一般都是调试基础库版本太低的原因，可以往上调一下。<br>问题②：发现版本库调高了之后发现了另外一个问题，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">errCode: -1  | errMsg: Cloud API isn&apos;t enabled, please call wx.cloud.init first</span><br><span class="line">请先调用 wx.cloud.init() 完成初始化后再调用其他云 API。init 方法可传入一个对象用于设置默认配置，详见文档。;at pages/test/test page getData function</span><br><span class="line">Error: errCode: -1  | errMsg: Cloud API isn&apos;t enabled, please call wx.cloud.init first</span><br><span class="line">请先调用 wx.cloud.init() 完成初始化后再调用其他云 API。init 方法可传入一个对象用于设置默认配置，详见文档。</span><br></pre></td></tr></table></figure></p><p>这个问题，就是调用云函数之前需要先进行初始化。wx.cloud.init()就可以了。再去调用云函数。<br><img src="https://upload-images.jianshu.io/upload_images/5814981-7ade77894b4a0420.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>成功获取返回来的数据。官方提供的一个最初的简单小demo就算走通了，剩下的基本上都是此类操作，只是需要对照官方数据库操作进行特别的操作。<br>如果这篇文章对你有帮助，希望您也能加入我的qq群帮助更多需要帮助的小程序开发者：751741695</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;9.10号微信重磅推出小程序云开发功能，该功能方便了很多逻辑上的问题，至于安全嘛，腾讯的，如果腾讯不看你的，没人看得到，话不多说，跟着腾讯文档进行第一个demo&lt;br&gt;首先要升级一个开发者工具版本，更新到最新，下载地址：&lt;a href=&quot;https://developers
      
    
    </summary>
    
      <category term="微信小程序" scheme="http://yoursite.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="微信小程序云开发" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>利用vue-cli3快速搭建vue项目详细过程</title>
    <link href="http://yoursite.com/2018/10/18/vue/"/>
    <id>http://yoursite.com/2018/10/18/vue/</id>
    <published>2018-10-18T02:14:20.650Z</published>
    <updated>2018-10-18T03:18:01.658Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p>Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统。有三个组件：</p><p><strong>CLI</strong>：<code>@vue/cli</code> 全局安装的 npm 包，提供了终端里的vue命令（如：vue create 、vue serve 、vue ui 等命令）</p><p><strong>CLI 服务</strong>：<code>@vue/cli-service</code>是一个开发环境依赖。构建于 <a href="http://webpack.js.org/" target="_blank" rel="noopener">webpack</a> 和 <a href="https://github.com/webpack/webpack-dev-server" target="_blank" rel="noopener">webpack-dev-server</a> 之上（提供 如：<code>serve</code>、<code>build</code> 和 <code>inspect</code> 命令）</p><p><strong>CLI 插件</strong>：给Vue 项目提供可选功能的 npm 包 （如： Babel/TypeScript 转译、ESLint 集成、unit和 e2e测试 等）</p><h1 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h1><h2 id="1、全局安装过旧版本的-vue-cli-1-x-或-2-x-要先卸载它，否则跳过此步："><a href="#1、全局安装过旧版本的-vue-cli-1-x-或-2-x-要先卸载它，否则跳过此步：" class="headerlink" title="1、全局安装过旧版本的 vue-cli(1.x 或 2.x)要先卸载它，否则跳过此步："></a>1、全局安装过旧版本的 <code>vue-cli</code>(1.x 或 2.x)要先卸载它，否则跳过此步：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall vue-cli -g //或者 yarn global remove vue-cli</span><br></pre></td></tr></table></figure><p>操作如下：</p><p><img src="http://upload-images.jianshu.io/upload_images/5814981-fd406123ad261b9f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>可以看到我之前的版本是2.9.6，卸载成功后，vue命令便不存在了</p><p>ps：npm WARN警告，可能是coffee-script 的某个依赖包改名了（coffee-script本身已经淘汰了）</p><h2 id="2、Vue-CLI-3需要-nodeJs-≥-8-9-官方推荐-8-11-0-，你可以使用-nvm-或-nvm-windows在同一台电脑中管理多个-Node-版本）。"><a href="#2、Vue-CLI-3需要-nodeJs-≥-8-9-官方推荐-8-11-0-，你可以使用-nvm-或-nvm-windows在同一台电脑中管理多个-Node-版本）。" class="headerlink" title="2、Vue CLI 3需要 nodeJs ≥ 8.9 (官方推荐 8.11.0+，你可以使用 nvm 或 nvm-windows在同一台电脑中管理多个 Node 版本）。"></a>2、Vue CLI 3需要 nodeJs ≥ 8.9 (官方推荐 8.11.0+，你可以使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a> 或 <a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">nvm-windows</a>在同一台电脑中管理多个 Node 版本）。</h2><h3 id="（1）查看node-版本"><a href="#（1）查看node-版本" class="headerlink" title="（1）查看node 版本"></a>（1）查看node 版本</h3><p><img src="http://upload-images.jianshu.io/upload_images/5814981-a9d6d36fc8564b44.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="（2）下载安装nodeJs很简单（和其他系统软件一样根据需求按步骤安装）这里不做介绍，中文官方下载地址：http-nodejs-cn-download"><a href="#（2）下载安装nodeJs很简单（和其他系统软件一样根据需求按步骤安装）这里不做介绍，中文官方下载地址：http-nodejs-cn-download" class="headerlink" title="（2）下载安装nodeJs很简单（和其他系统软件一样根据需求按步骤安装）这里不做介绍，中文官方下载地址：http://nodejs.cn/download/ "></a>（2）下载安装nodeJs很简单（和其他系统软件一样根据需求按步骤安装）这里不做介绍，<strong>中文官方</strong>下载地址：<a href="http://nodejs.cn/download/%C2%A0" target="_blank" rel="noopener">http://nodejs.cn/download/ </a></h3><h2 id="3、安装-vue-cli（Vue-CLI-3的包名称由-vue-cli-改成了-vue-cli）"><a href="#3、安装-vue-cli（Vue-CLI-3的包名称由-vue-cli-改成了-vue-cli）" class="headerlink" title="3、安装@vue/cli（Vue CLI 3的包名称由 vue-cli 改成了 @vue/cli）"></a>3、安装@vue/cli（Vue CLI 3的包名称由 <code>vue-cli</code> 改成了 <code>@vue/cli</code>）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g @vue/cli  //yarn global add @vue/cli</span><br></pre></td></tr></table></figure><p>操作如下图：</p><p><img src="http://upload-images.jianshu.io/upload_images/5814981-3d5dfb1fb27d5689.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>查看版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue -V //vue --version</span><br></pre></td></tr></table></figure><p>结果如下图：</p><p><img src="http://upload-images.jianshu.io/upload_images/5814981-97dc60d5a8968aab.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h1 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h1><h2 id="1、vue-create-搭建新项目"><a href="#1、vue-create-搭建新项目" class="headerlink" title="1、vue create 搭建新项目"></a>1、vue create 搭建新项目</h2><h3 id="（1）新建项目："><a href="#（1）新建项目：" class="headerlink" title="（1）新建项目："></a>（1）新建项目：</h3><p>*官方提示：如果你在 Windows 上通过 minTTY 使用 Git Bash，交互提示符并不工作，必须通过 <code>winpty vue.cmd create hello-world</code> 启动这个命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create &lt;Project Name&gt; //文件名 不支持驼峰（含大写字母）</span><br></pre></td></tr></table></figure><p>具体操作如下：</p><p>首先，会提示你选择一个preset（预设）：</p><p>① 除最后两个<strong>，</strong>其他选项都是你此前保存的预设配置（如下图第一个“ preset-config”是我之前保存的预设配置，如今便可以直接用了）：</p><p><img src="http://upload-images.jianshu.io/upload_images/5814981-505317b669775349.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>如果没有配置保存过，则只有以下两个选项：</p><p>② default（babel，eslint）：</p><p>默认设置（直接enter）非常适合快速创建一个新项目的原型，没有带任何辅助功能的 npm包</p><p>③ Manually select features：</p><p>手动配置（按方向键 ↓）是我们所需要的面向生产的项目，提供可选功能的 npm 包</p><p> <img src="http://upload-images.jianshu.io/upload_images/5814981-a7a4ed4303d41236.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>手动配置，根据你需要用方向键选择（按 “空格键”选择/取消选择，A键全选/取消全选）对应功能</p><p><img src="http://upload-images.jianshu.io/upload_images/5814981-15c4f370a82915c4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>简介：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">? Check the features needed for your project: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)</span><br><span class="line">&gt;( ) Babel                           //转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。                      </span><br><span class="line"> ( ) TypeScript// TypeScript是一个JavaScript（后缀.js）的超集（后缀.ts）包含并扩展了 JavaScript 的语法，需要被编译输出为 JavaScript在浏览器运行，目前较少人再用</span><br><span class="line"> ( ) Progressive Web App (PWA) Support// 渐进式Web应用程序</span><br><span class="line"> ( ) Router                           // vue-router（vue路由）</span><br><span class="line"> ( ) Vuex                             // vuex（vue的状态管理模式）</span><br><span class="line"> ( ) CSS Pre-processors               // CSS 预处理器（如：less、sass）</span><br><span class="line"> ( ) Linter / Formatter               // 代码风格检查和格式化（如：ESlint）</span><br><span class="line"> ( ) Unit Testing                     // 单元测试（unit tests）</span><br><span class="line"> ( ) E2E Testing                      // e2e（end to end） 测试</span><br></pre></td></tr></table></figure><p>选择完后直接enter，然后会提示你选择对应功能的具体工具包，选择自己擅长或者使用广泛的（方便遇到问题时百度），简介如下：</p><p>①是否使用history router：</p><p><img src="http://upload-images.jianshu.io/upload_images/5814981-8ae53616038bce26.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>Vue-Router 利用了浏览器自身的hash 模式和 history 模式的特性来实现前端路由（通过调用浏览器提供的接口）</p><p><strong>hash：</strong> 浏览器url址栏 中的 # 符号（如这个 URL：<a href="http://www.abc.com/#/hello，hash" target="_blank" rel="noopener">http://www.abc.com/#/hello，hash</a> 的值为“ #/hello”），hash 不被包括在 HTTP 请求中（对后端完全没有影响），因此改变 hash 不会重新加载页面</p><p><strong>history：</strong>利用了 HTML5 History Interface 中新增的 pushState( ) 和 replaceState( ) 方法（需要特定浏览器支持）。单页客户端应用，history mode 需要后台配置支持（详细参见：<a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90" target="_blank" rel="noopener">https://router.vuejs.org/zh/guide/essentials/history-mode.html</a>）</p><p>② css预处理器</p><p>主要为css解决浏览器兼容、简化CSS代码 等问题（*<em><u style="box-sizing: inherit;"> Sass诞生于2007年，最早也是最成熟的一款CSS预处理器语言。</u></em>）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: Router, Vuex, CSS Pre-processors, Linter, Unit</span><br><span class="line">? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default):</span><br><span class="line">&gt; SCSS/SASS  //Sass安装需要Ruby环境，是在服务端处理的，SCSS 是 Sass3新语法（完全兼容 CSS3且继承Sass功能）</span><br><span class="line">  LESS       //Less最终会通过编译处理输出css到浏览器，Less 既可以在客户端上运行，也可在服务端运行 (借助 Node.js)</span><br><span class="line">  Stylus     //Stylus主要用来给Node项目进行CSS预处理支持，Stylus功能上更为强壮，和js联系更加紧密，可创建健壮的、动态的的CSS。</span><br></pre></td></tr></table></figure><p>③ ESLint：</p><p>提供一个插件化的javascript代码检测工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">? Pick a linter / formatter config: (Use arrow keys)</span><br><span class="line">&gt; ESLint with error prevention only</span><br><span class="line">  ESLint + Airbnb config</span><br><span class="line">  ESLint + Standard config</span><br><span class="line">  ESLint + Prettier         //使用较多</span><br></pre></td></tr></table></figure><p>④ 何时检测：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">? Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)</span><br><span class="line">&gt;( ) Lint on save                    // 保存就检测</span><br><span class="line"> ( ) Lint and fix on commit          // fix和commit时候检查</span><br></pre></td></tr></table></figure><p>⑤ 单元测试 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">? Pick a unit testing solution: (Use arrow keys)</span><br><span class="line">&gt; Mocha + Chai  //mocha灵活,只提供简单的测试结构，如果需要其他功能需要添加其他库/插件完成。必须在全局环境中安装</span><br><span class="line">  Jest          //安装配置简单，容易上手。内置Istanbul，可以查看到测试覆盖率，相较于Mocha:配置简洁、测试代码简洁、易于和babel集成、内置丰富的expect</span><br></pre></td></tr></table></figure><p>⑥ 如何存放配置 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">? Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? (Use arrow keys)</span><br><span class="line">&gt; In dedicated config files // 独立文件放置</span><br><span class="line">  In package.json // 放package.json里</span><br></pre></td></tr></table></figure><p> ⑦ 是否保存本次配置（之后可以直接使用）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">? Save this as a preset for future projects? (Y/n) // y:记录本次配置，然后需要你起个名; n：不记录本次配置</span><br></pre></td></tr></table></figure><h3 id="（2）搭建完成："><a href="#（2）搭建完成：" class="headerlink" title="（2）搭建完成："></a>（2）搭建完成：</h3><p><img src="http://upload-images.jianshu.io/upload_images/5814981-a01b7ba0d2e5091a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>项目结构如下（不同的预设包含不同的文件，大致结构一致）：</p><p><img src="http://upload-images.jianshu.io/upload_images/5814981-b340652ba0591b63.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>对比之前的项目包：</p><p><img src="http://upload-images.jianshu.io/upload_images/5814981-8ab501d009b3868b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>vs<img src="http://upload-images.jianshu.io/upload_images/5814981-44c1f985f453e933.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>精简的只剩灵魂了~ ，主要的大的区别如下：</p><p>① vuex（状态管理）：</p><p><strong>vue cli 2 中</strong>：vuex是搭建完成后自己npm install的，并不包括在搭建过程中。可以看到vue cli 2的vuex默认文件夹（store）又包含了三个js文件：action（存放一些调用外部API接口的<strong>异步执行的</strong>的方法，然后commit mutations改变mutations 数据）、index（初始化mutations 数据，是store的出口）、mutations（处理数据逻辑的<strong>同步执行的</strong>方法的集合，Vuex中store数据改变的唯一方法commit mutations）</p><p><strong>vue cli 3 中</strong>：vuex是包含在搭建过程供选择的预设。vue cli 3 中默认只用一个store.js代替了原来的store文件夹中的三个js文件。action、mutations、state以及store 的 getters 的用法有很多，举常用的例子：</p><p>eg：store.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;;</span><br><span class="line">import Vuex from &apos;vuex&apos;; //引入 vuex</span><br><span class="line">import store from &apos;./store&apos; //注册store</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex); //使用 vuex</span><br><span class="line"></span><br><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        // 初始化状态</span><br><span class="line">        count: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        // 处理状态</span><br><span class="line">        increment(state, payload) &#123;</span><br><span class="line">            state.count += payload.step || 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        // 提交改变后的状态</span><br><span class="line">        increment(context, param) &#123;</span><br><span class="line">            context.state.count += param.step;</span><br><span class="line">            context.commit(&apos;increment&apos;, context.state.count)//提交改变后的state.count值</span><br><span class="line">        &#125;,</span><br><span class="line">        incrementStep(&#123;state, commit, rootState&#125;) &#123;</span><br><span class="line">            if (rootState.count &lt; 100) &#123;</span><br><span class="line">                store.dispatch(&apos;increment&apos;, &#123;//调用increment()方法</span><br><span class="line">                    step: 10</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用时，eg：</p><p>main.js：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import App from &apos;./App.vue&apos;</span><br><span class="line">import router from &apos;./router&apos;</span><br><span class="line">import store from &apos;./store&apos; //引入状态管理 store</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,//注册store(这可以把 store 的实例注入所有的子组件)</span><br><span class="line">  render: h =&gt; h(App)</span><br><span class="line">&#125;).$mount(&apos;#app&apos;)</span><br></pre></td></tr></table></figure><p>components/HelloWorld.vue：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;home&quot;&gt;</span><br><span class="line">        &lt;HelloWorld :msg=&quot;count&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import HelloWorld from &apos;@/components/HelloWorld.vue&apos;</span><br><span class="line">    import &#123;mapActions, mapState&#125; from &apos;vuex&apos; //注册 action 和 state</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &apos;home&apos;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            //在这里映射 store.state.count，使用方法和 computed 里的其他属性一样</span><br><span class="line">            ...mapState([</span><br><span class="line">                &apos;count&apos; </span><br><span class="line">            ]),</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">            this.incrementStep();</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            //在这里引入 action 里的方法，使用方法和 methods 里的其他方法一样</span><br><span class="line">            ...mapActions([</span><br><span class="line">                &apos;incrementStep&apos;</span><br><span class="line">            ]),</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            HelloWorld</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>② router （路由）：</p><p><strong>vue cli 2 ：</strong>“ router/index.js ”</p><p><strong>vue cli 3：</strong>“router.js”（用法和做的事都一样）</p><p>③ 去掉 static  、 新增 public 文件夹</p><p><strong>vue cli 2  ：</strong>static 是 webpack 默认存放静态资源的文件夹，打包时会直接复制一份到dist文件夹不会经过 webpack 编译 </p><p><strong>vue cli 3  ：</strong>摒弃 static 新增了 public 。vue cli 3 中“静态资源”两种处理方式：</p><ul><li><p>经webpack 处理：在 JavaScript 被导入或在 template/CSS 中通过“相对路径”被引用的资源会被编译并压缩</p></li><li><p>不经webpack 处理：放置在 <code>public</code> 目录下或通过绝对路径被引用的资源将会“直接被拷贝”一份，不做任何编译压缩处理</p></li></ul><p>④ index.html ：</p><p><u style="box-sizing: inherit;">vue cli 2 </u>：“index.html ” </p><p>v<u style="box-sizing: inherit;">ue cli 3 </u>：“public/index.html ”此模板会被 <a href="https://github.com/jantimon/html-webpack-plugin" target="_blank" rel="noopener">html-webpack-plugin</a> 处理的</p><p>⑤ src/views：</p><p>vue cli 3 的 src文件夹 新增 views文件夹 用来存放 “页面”，区分 components（组件）</p><p>⑥ 去掉 build（根据config中的配置来定义规则）、config（配置不同环境的参数）文件夹 ：</p><p> <u style="box-sizing: inherit;">vue cli 3 中 </u>，这些配置 你可以通过 命令行参数、或 <code>vue.config.js</code> （在根目录 新建一个 vue.config.js 同名文件）里的 <a href="https://cli.vuejs.org/zh/config/#devserver" target="_blank" rel="noopener">devServer</a> 字段配置开发服务器 </p><p>⑦ babel.config.js：</p><p>配置Babel 。Vue CLI 使用了 Babel 7 中的新配置格式 <code>babel.config.js</code>。和 <code>.babelrc</code> 或 <code>package.json</code> 中的 <code>babel</code> 字段不同，这个配置文件不会使用基于文件位置的方案，而是会一致地运用到项目根目录以下的所有文件，包括 <code>node_modules</code> 内部的依赖。官方推荐在 Vue CLI 项目中始终使用 <code>babel.config.js</code> 取代其它格式。</p><p>⑧ 根目录的一些其他文件的改变：</p><p>之前所有的配置文件都在vue create 搭建时preset预设 或者 后期可以通过 命令参数 、 <code>vue.config.js 中配置</code></p><p><strong><u style="box-sizing: inherit;"><code>根据需要在根目录下新建 vue.config.js自行配置，eg：（</code></u></strong><code>简单配置，更多配置详情参见官网：[https://cli.vuejs.org/zh/config/](https://cli.vuejs.org/zh/config/)</code><strong><u style="box-sizing: inherit;"><code>）</code></u></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    baseUrl: &apos;/&apos;,// 部署应用时的根路径(默认&apos;/&apos;),也可用相对路径(存在使用限制)</span><br><span class="line">    outputDir: &apos;dist&apos;,// 运行时生成的生产环境构建文件的目录(默认&apos;&apos;dist&apos;&apos;，构建之前会被清除)</span><br><span class="line">    assetsDir: &apos;&apos;,//放置生成的静态资源(s、css、img、fonts)的(相对于 outputDir 的)目录(默认&apos;&apos;)</span><br><span class="line">    indexPath: &apos;index.html&apos;,//指定生成的 index.html 的输出路径(相对于 outputDir)也可以是一个绝对路径。</span><br><span class="line">    pages: &#123;//pages 里配置的路径和文件名在你的文档目录必须存在 否则启动服务会报错</span><br><span class="line">        index: &#123;//除了 entry 之外都是可选的</span><br><span class="line">            entry: &apos;src/index/main.js&apos;,// page 的入口,每个“page”应该有一个对应的 JavaScript 入口文件</span><br><span class="line">            template: &apos;public/index.html&apos;,// 模板来源</span><br><span class="line">            filename: &apos;index.html&apos;,// 在 dist/index.html 的输出</span><br><span class="line">            title: &apos;Index Page&apos;,// 当使用 title 选项时,在 template 中使用：&lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span><br><span class="line">            chunks: [&apos;chunk-vendors&apos;, &apos;chunk-common&apos;, &apos;index&apos;] // 在这个页面中包含的块，默认情况下会包含,提取出来的通用 chunk 和 vendor chunk</span><br><span class="line">        &#125;,</span><br><span class="line">        subpage: &apos;src/subpage/main.js&apos;//官方解释：当使用只有入口的字符串格式时,模板会被推导为&apos;public/subpage.html&apos;,若找不到就回退到&apos;public/index.html&apos;,输出文件名会被推导为&apos;subpage.html&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    lintOnSave: true,// 是否在保存的时候检查</span><br><span class="line">    productionSourceMap: true,// 生产环境是否生成 sourceMap 文件</span><br><span class="line">    css: &#123;</span><br><span class="line">        extract: true,// 是否使用css分离插件 ExtractTextPlugin</span><br><span class="line">        sourceMap: false,// 开启 CSS source maps</span><br><span class="line">        loaderOptions: &#123;&#125;,// css预设器配置项</span><br><span class="line">        modules: false// 启用 CSS modules for all css / pre-processor files.</span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;// 环境配置</span><br><span class="line">        host: &apos;localhost&apos;,</span><br><span class="line">        port: 8080,</span><br><span class="line">        https: false,</span><br><span class="line">        hotOnly: false,</span><br><span class="line">        open: true, //配置自动启动浏览器</span><br><span class="line">        proxy: &#123;// 配置多个代理(配置一个 proxy: &apos;http://localhost:4000&apos; )</span><br><span class="line">            &apos;/api&apos;: &#123;</span><br><span class="line">                target: &apos;&lt;url&gt;&apos;,</span><br><span class="line">                ws: true,</span><br><span class="line">                changeOrigin: true</span><br><span class="line">            &#125;,</span><br><span class="line">            &apos;/foo&apos;: &#123;</span><br><span class="line">                target: &apos;&lt;other_url&gt;&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    pluginOptions: &#123;// 第三方插件配置</span><br><span class="line">        // ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="（3）npm-run-serve-跑起来"><a href="#（3）npm-run-serve-跑起来" class="headerlink" title="（3）npm run serve 跑起来~"></a>（3）npm run serve 跑起来~</h3><p><img src="http://upload-images.jianshu.io/upload_images/5814981-7303f357df32777d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/5814981-0c45fee0960e693f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>webstorm打开项目（个人习惯，你也可以搭建完直接顺势运行），运行后webstorm自动生成了个.idea文件（用来存放项目的配置信息，如：括版本控制信息、历史记录等）</p><p><img src="http://upload-images.jianshu.io/upload_images/5814981-d2b13c69417503ab.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="（4）查看运行结果："><a href="#（4）查看运行结果：" class="headerlink" title="（4）查看运行结果："></a>（4）查看运行结果：</h3><p>打开浏览器，输入运行结果提示的地址（上上图红框），enter</p><p><img src="http://upload-images.jianshu.io/upload_images/5814981-e532bc879ad294ef.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="（5）拉取-2-x-模板-旧版本-："><a href="#（5）拉取-2-x-模板-旧版本-：" class="headerlink" title="（5）拉取 2.x 模板 (旧版本)："></a>（5）拉取 2.x 模板 (旧版本)：</h3><p>Vue CLI 3 覆盖了旧版本的<code>vue</code> 命令，如果需要使用旧版本的 <code>vue init</code> 功能，可以全局安装一个桥接工具：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli-init //`vue init` 的运行效果将会跟 `vue-cli@2.x` 相同</span><br><span class="line">vue init webpack my-project</span><br></pre></td></tr></table></figure><h3 id="（6）在现有的项目中安装插件（vue-add-命令），eg："><a href="#（6）在现有的项目中安装插件（vue-add-命令），eg：" class="headerlink" title="（6）在现有的项目中安装插件（vue add 命令），eg："></a>（6）在现有的项目中安装插件（vue add 命令），eg：</h3><ul><li>官方提示：<code>vue add</code> 的设计意图是为了安装和调用 Vue CLI 插件。这不意味着替换掉普通的 npm 包。对于这些普通的 npm 包，你仍然需要选用包管理器</li></ul><p>！官方警告：我们推荐在运行 <code>vue add</code> 之前将项目的最新状态提交，因为该命令可能调用插件的文件生成器并很有可能更改你现有的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue add @vue/eslint //如果不带 @vue 前缀，该命令会换作解析一个 unscoped 的包，你也可以基于一个指定的 scope 使用（eg：vue add @foo/bar）</span><br></pre></td></tr></table></figure><h2 id="2、vue-ui-图形化界面创建项目"><a href="#2、vue-ui-图形化界面创建项目" class="headerlink" title="2、vue ui 图形化界面创建项目"></a>2、vue ui 图形化界面创建项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure><h3 id="命令行输入命令，操作如下："><a href="#命令行输入命令，操作如下：" class="headerlink" title="命令行输入命令，操作如下："></a><strong>命令行输入命令，操作如下：</strong></h3><p><img src="http://upload-images.jianshu.io/upload_images/5814981-e93d4fca9ff20679.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="然后会自动打浏览器页面，选择创建如下："><a href="#然后会自动打浏览器页面，选择创建如下：" class="headerlink" title="然后会自动打浏览器页面，选择创建如下："></a><strong>然后会自动打浏览器页面，选择创建如下：</strong></h3><p><img src="http://upload-images.jianshu.io/upload_images/5814981-b51ecf3e250c645e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/5814981-40447e81043f981e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/5814981-18a81fa7ca54212b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="结果如下："><a href="#结果如下：" class="headerlink" title="结果如下："></a><strong>结果如下：</strong></h3><p><strong>页面提示正在安装依赖：</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/5814981-4bfb10a6bb59934f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><strong>本地已经有项目包了：</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/5814981-12ca22daf4d36d3e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><strong>安装完成：你可以在这管理（安装、删除）插件、运行并分析你的项目文件</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/5814981-ff86292f519d23a8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章来源：https://my.oschina.net/wangnian/blog/2051369</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、介绍&quot;&gt;&lt;a href=&quot;#一、介绍&quot; class=&quot;headerlink&quot; title=&quot;一、介绍&quot;&gt;&lt;/a&gt;一、介绍&lt;/h1&gt;&lt;p&gt;Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统。有三个组件：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CLI&lt;/st
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="vue-cli3" scheme="http://yoursite.com/tags/vue-cli3/"/>
    
  </entry>
  
</feed>
